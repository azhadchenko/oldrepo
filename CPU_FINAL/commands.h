SET_COMMAND_NO_ARG(ADD, {tmp1 = pop(&object->stack); tmp2 = pop(&object->stack); tmp1+=tmp2; push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(SUB, {tmp1 = pop(&object->stack); tmp2 = pop(&object->stack); tmp2-=tmp1; push(&object->stack, tmp2);comm_ptr++;})
SET_COMMAND_NO_ARG(MUL, {tmp1 = pop(&object->stack); tmp2 = pop(&object->stack); tmp1=tmp2*tmp1; push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(DIV, {tmp1 = pop(&object->stack); tmp2 = pop(&object->stack); tmp2/=tmp1; push(&object->stack, tmp2);comm_ptr++;})
SET_COMMAND_NO_ARG(SIN, {tmp1 = pop(&object->stack); tmp1 = sin(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(COS, {tmp1 = pop(&object->stack); tmp1 = cos(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(TAN, {tmp1 = pop(&object->stack); tmp1 = tan(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(CTG, {tmp1 = pop(&object->stack); tmp1 = 1/tan(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(POW, {tmp1 = pop(&object->stack); tmp2 = pop(&object->stack); tmp1=int(tmp2)^int(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(SQRT,{tmp1 = pop(&object->stack); tmp1 = sqrt(tmp1); push(&object->stack, tmp1);comm_ptr++;})
SET_COMMAND_NO_ARG(IN,  {scanf(" %lf ", &tmp1); push(&object->stack, tmp1); comm_ptr++;})
SET_COMMAND_NO_ARG(OUT, {printf(" %lf ", pop(&object->stack)); comm_ptr++;})
SET_COMMAND_NO_ARG(END, {check = false;})
SET_COMMAND_NO_ARG(RET, {comm_ptr=pop_p(&object->pointers);})

SET_JUMPS(JMP, {comm_ptr++; comm_ptr=object->si + *((int*)comm_ptr);})
SET_JUMPS(JE,  {comm_ptr++; if(pop(&object->stack)==pop(&object->stack))comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(JNE, {comm_ptr++; if(pop(&object->stack)!=pop(&object->stack))comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(JA,  {comm_ptr++; if(pop(&object->stack)>pop(&object->stack)) comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(JAE, {comm_ptr++; if(pop(&object->stack)>=pop(&object->stack))comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(JB,  {comm_ptr++; if(pop(&object->stack)<pop(&object->stack)) comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(JBE, {comm_ptr++; if(pop(&object->stack)<=pop(&object->stack))comm_ptr=object->si + *((int*)comm_ptr);else comm_ptr+=sizeof(int);})
SET_JUMPS(CALL,{comm_ptr++; push_p(&object->pointers, comm_ptr+sizeof(int)); comm_ptr=object->si + *((int*)comm_ptr);})
